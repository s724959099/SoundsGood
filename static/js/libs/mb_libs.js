// Generated by CoffeeScript 1.10.0
(function() {
  var event, installEvent,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.myAjax = {
    _base: function(type, urlStr, obj, callback) {

      /*
       base ajax function
       */
      var data, option;
      option = {
        url: urlStr,
        type: type,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
          data["xhr"] = jqXHR;
          return callback(data);
        },
        error: function(jqXHR, textStatus) {
          var data;
          data = {
            xhr: jqXHR
          };
          return callback(data);
        }
      };
      if (type !== "GET") {
        option["contentType"] = "application/json";
      }
      if (obj !== null) {
        data = type === "GET" ? obj : JSON.stringify(obj);
        option["data"] = data;
      }
      return $.ajax(option);
    },
    _baseSync: function(type, urlStr, obj) {

      /*
       base ajax function
       */
      var data, option, response;
      response = {};
      option = {
        url: urlStr,
        type: type,
        async: false,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
          response = data;
          return response["xhr"] = jqXHR;
        },
        error: function(jqXHR, textStatus) {
          return response["xhr"] = jqXHR;
        }
      };
      if (type !== "GET") {
        option["contentType"] = "application/json";
      }
      if (obj !== null) {
        data = type === "GET" ? obj : JSON.stringify(obj);
        option["data"] = data;
      }
      $.ajax(option);
      return response;
    },
    get: function(urlStr, obj, callback) {
      return this._base("GET", urlStr, obj, callback);
    },
    post: function(urlStr, obj, callback) {
      return this._base("POST", urlStr, obj, callback);
    },
    put: function(urlStr, obj, callback) {
      return this._base("PUT", urlStr, obj, callback);
    },
    "delete": function(urlStr, obj, callback) {
      return this._base("DELETE", urlStr, obj, callback);
    },
    getSync: function(urlStr, obj) {
      return this._baseSync("GET", urlStr, obj);
    },
    postSync: function(urlStr, obj) {
      return this._baseSync("POST", urlStr, obj);
    },
    putSync: function(urlStr, obj) {
      return this._baseSync("PUT", urlStr, obj);
    },
    deleteSync: function(urlStr, obj) {
      return this._baseSync("DELETE", urlStr, obj);
    }
  };

  window.print = function(str) {
    return console.log(str);
  };


  /*
      set trigger and listen
   */

  event = {
    clientList: [],
    triggerArgs: [],
    clear: function() {
      this.clientList = [];
      return this.triggerArgs = [];
    },
    listen: function(key, fn) {
      var args, j, len, ref;
      if (!this.clientList[key]) {
        this.clientList[key] = [];
      }
      this.clientList[key].push(fn);
      if (this.triggerArgs[key]) {
        ref = this.triggerArgs[key];
        for (j = 0, len = ref.length; j < len; j++) {
          args = ref[j];
          fn.apply(this, args);
        }
      }
    },
    trigger: function() {
      var fn, fns, i, key;
      key = Array.prototype.shift.call(arguments);
      fns = this.clientList[key];
      if (!this.triggerArgs[key]) {
        this.triggerArgs[key] = [];
      }
      this.triggerArgs[key].push(arguments);
      if (!fns || fns.length === 0) {
        return false;
      }
      i = 0;
      fn = void 0;
      while (fn = fns[i++]) {
        fn.apply(this, arguments);
      }
    }
  };

  installEvent = function(obj) {
    var key;
    for (key in event) {
      obj[key] = event[key];
    }
    return obj;
  };

  window.CloudesignEvents = installEvent({});

  window.mySerialize = {
    serialize_value_to_bool: function(data, name) {
      var index, j, len, new_obj, obj, results;
      results = [];
      for (index = j = 0, len = data.length; j < len; index = ++j) {
        obj = data[index];
        new_obj = obj;
        if (obj.name === name) {
          if (obj.value === "True") {
            new_obj["value"] = true;
          } else if (obj.value === "False") {
            new_obj["value"] = false;
          }
        }
        results.push(data[index] = new_obj);
      }
      return results;
    },
    serialize_value_to_null: function(data, name) {
      var index, j, len, new_obj, obj, results;
      results = [];
      for (index = j = 0, len = data.length; j < len; index = ++j) {
        obj = data[index];
        new_obj = obj;
        if (obj.name === name) {
          if (obj.value === "") {
            new_obj["value"] = null;
          }
        }
        results.push(data[index] = new_obj);
      }
      return results;
    },
    serialize_value_to_remove: function(data, name) {
      var index, j, len, new_obj, obj, results;
      results = [];
      for (index = j = 0, len = data.length; j < len; index = ++j) {
        obj = data[index];
        new_obj = obj;
        if (obj.name === name) {
          debugger;
          data.splice(index, 1);
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    },
    serialize_to_obj: function(data) {
      var index, j, len, new_obj, obj;
      new_obj = {};
      for (index = j = 0, len = data.length; j < len; index = ++j) {
        obj = data[index];
        new_obj[obj.name] = obj.value;
      }
      data = new_obj;
      return new_obj;
    },
    obj_to_serialize: function(obj, exceptList) {
      var data, key, val;
      data = [];
      exceptList = exceptList === void 0 ? [] : exceptList;
      for (key in obj) {
        val = obj[key];
        if (indexOf.call(exceptList, key) >= 0) {
          continue;
        }
        data.push({
          name: key,
          value: val
        });
      }
      return data;
    },
    lowercase_to_specifyValue: function(datas, value) {
      var index, j, len, new_obj, obj, results;
      results = [];
      for (index = j = 0, len = datas.length; j < len; index = ++j) {
        obj = datas[index];
        new_obj = obj;
        if (obj.name === value.toLowerCase()) {
          new_obj["name"] = value;
        }
        results.push(datas[index] = new_obj);
      }
      return results;
    }
  };

  window.remove_data_items = function(data, idName, constrain) {
    var index, j, len, obj, results;
    results = [];
    for (index = j = 0, len = data.length; j < len; index = ++j) {
      obj = data[index];
      if (obj[idName] === constrain) {
        data.splice(index, 1);
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  window.dataProcess = {
    isIndata: function(data, idName, val) {
      var index, j, len, obj;
      for (index = j = 0, len = data.length; j < len; index = ++j) {
        obj = data[index];
        if (obj[idName] === val) {
          return true;
        }
      }
      return false;
    },
    remove_data_by_id: function(data, idName, val) {
      var index, j, len, new_data, obj;
      new_data = [];
      for (index = j = 0, len = data.length; j < len; index = ++j) {
        obj = data[index];
        if (obj[idName] !== val) {
          new_data.push(obj);
        }
      }
      return new_data;
    }
  };

  window.myCookies = {
    getTenantCompanyId: function() {
      return JSON.parse(Cookies.get("Tenant")).CompanyId;
    },
    getCompanyId: function() {
      var CompanyId;
      return CompanyId = Cookies.get("CompanyId");
    },
    isDesigner: function() {
      var CompanyId;
      CompanyId = Cookies.get("CompanyId");
      return JSON.parse(Cookies.get("Tenant")).CompanyId === CompanyId;
    }
  };

  Vue.options.delimiters = ['${', '}'];

}).call(this);

//# sourceMappingURL=mb_libs.js.map
